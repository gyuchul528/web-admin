<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= category.name %> - 新規製品追加</title>
    <!-- Bootstrap 5.3.0 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Quill.js CDN -->
    <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
    <style>
        #editor-container {
            height: 400px;
            margin-bottom: 1rem;
        }
        .ql-editor {
            min-height: 350px;
        }
        .thumbnail-preview {
            max-width: 200px;
            margin-top: 1rem;
        }
        .thumbnail-preview img {
            max-width: 100%;
            height: auto;
        }
        .thumbnail-actions {
            margin-top: 0.5rem;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container-fluid py-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h1 class="h3 mb-0"><%= category.name %> - 新規製品追加</h1>
            </div>
            
            <div class="card-body">
                <form id="productForm" class="needs-validation" novalidate>
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label">製品名</label>
                            <input type="text" name="name" class="form-control" required>
                            <div class="invalid-feedback">製品名を入力してください</div>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">分類 <span class="text-danger">*</span></label>
                            <select name="product_category_id" class="form-select" required onchange="updateSubcategories(this.value)">
                                <option value="">選択してください</option>
                                <% productCategories.forEach(function(category) { %>
                                    <option value="<%= category.id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                            <div class="invalid-feedback">分類を選択してください</div>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">小分類</label>
                            <select name="subcategory_id" id="subcategory_select" class="form-select">
                                <option value="">分類を選択してください</option>
                            </select>
                            <div class="text-danger small" id="subcategory-error" style="display: none;"></div>
                        </div>

                        <div class="col-12">
                            <label class="form-label">サムネイル</label>
                            <div class="input-group">
                                <input type="file" name="thumbnail" id="thumbnail" class="form-control" 
                                       accept="image/*" onchange="previewImage(this)" style="display: none;">
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="document.getElementById('thumbnail').click()">
                                    画像を選択
                                </button>
                            </div>
                            <div id="thumbnailPreview" class="thumbnail-preview" style="display: none;">
                                <img id="preview" class="img-thumbnail">
                                <div class="thumbnail-actions d-flex align-items-center gap-2">
                                    <span class="text-muted small" id="filename"></span>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="cancelThumbnail()">
                                        取り消し
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">価格</label>
                            <div class="input-group">
                                <span class="input-group-text">¥</span>
                                <input type="number" name="price" class="form-control" min="0" step="1">
                            </div>
                        </div>

                        <div class="col-12">
                            <label class="form-label">概要</label>
                            <textarea name="summary" class="form-control" rows="3"></textarea>
                        </div>

                        <div class="col-12">
                            <label class="form-label">商品説明</label>
                            <div id="editor-container"></div>
                            <input type="hidden" id="description" name="description" required>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">状態</label>
                            <select name="status" class="form-select">
                                <option value="1">公開</option>
                                <option value="0">非公開</option>
                            </select>
                        </div>

                        <div class="col-12">
                            <div class="d-flex gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">保存</button>
                                <button type="button" onclick="history.back()" class="btn btn-secondary">戻る</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Quill.js -->
    <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
    
    <script>
        // Quill.jsの初期化
        const quill = new Quill('#editor-container', {
            theme: 'snow',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    ['blockquote', 'code-block'],
                    [{ 'header': 1 }, { 'header': 2 }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    [{ 'script': 'sub'}, { 'script': 'super' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'size': ['small', false, 'large', 'huge'] }],
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'font': [] }],
                    [{ 'align': [] }],
                    ['clean'],
                    ['link', 'image']
                ]
            },
            placeholder: '商品の説明を入力してください...'
        });

        // サムネイルプレビュー
        function previewImage(input) {
            const preview = document.getElementById('preview');
            const filename = document.getElementById('filename');
            const previewContainer = document.getElementById('thumbnailPreview');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    filename.textContent = input.files[0].name;
                    previewContainer.style.display = 'block';
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        // サムネイルの取り消し
        function cancelThumbnail() {
            const input = document.getElementById('thumbnail');
            const previewContainer = document.getElementById('thumbnailPreview');
            input.value = '';
            previewContainer.style.display = 'none';
        }

        // 小分類の更新処理を改善
        async function updateSubcategories(categoryId) {
            const select = document.getElementById('subcategory_select');
            const errorDiv = document.getElementById('subcategory-error');
            
            // エラーメッセージをリセット
            errorDiv.style.display = 'none';
            errorDiv.textContent = '';

            // 選択をリセット
            select.innerHTML = '<option value="">読み込み中...</option>';
            select.disabled = true;

            if (!categoryId) {
                select.innerHTML = '<option value="">分類を選択してください</option>';
                select.disabled = true;
                return;
            }

            try {
                const response = await fetch(`/admin/product-categories/${categoryId}/subcategories`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();

                // 小分類のオプションを更新
                select.innerHTML = '<option value="">選択してください</option>';
                
                if (Array.isArray(data) && data.length > 0) {
                    data.forEach(sub => {
                        const option = document.createElement('option');
                        option.value = sub.id;
                        option.textContent = sub.name;
                        select.appendChild(option);
                    });
                    select.disabled = false;
                } else {
                    select.innerHTML = '<option value="">小分類がありません</option>';
                    select.disabled = true;
                }

            } catch (error) {
                console.error('Error:', error);
                select.innerHTML = '<option value="">選択してください</option>';
                select.disabled = true;
                errorDiv.textContent = 'データの取得に失敗しました。もう一度お試しください。';
                errorDiv.style.display = 'block';
                
                // エラーメッセージを3秒後に消す
                setTimeout(() => {
                    errorDiv.style.display = 'none';
                }, 3000);
            }
        }

        // フォームのバリデーションを強化
        document.getElementById('productForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!this.checkValidity()) {
                e.stopPropagation();
                this.classList.add('was-validated');
                return;
            }

            // Quill.jsの内容を取得
            const description = quill.root.innerHTML;
            if (!description.trim()) {
                alert('商品説明を入力してください');
                return;
            }
            document.getElementById('description').value = description;
            
            const formData = new FormData(this);
            
            try {
                const response = await fetch('/admin/products/add/<%= category.id %>', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    alert('製品を登録しました');
                    window.location.href = '/admin/products/<%= category.id %>/list';
                } else {
                    alert(result.message || '製品の登録に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('製品の登録に失敗しました');
            }
        });
    </script>
</body>
</html> 