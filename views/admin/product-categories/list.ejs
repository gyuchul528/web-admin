<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>製品分類一覧</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .operation-buttons {
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f5f5f5;
        }
        .order-input {
            width: 60px;
        }
        .subcategories {
            margin-left: 30px;
            border-left: 2px solid #ddd;
            padding-left: 10px;
        }
        .subcategory-item {
            margin: 5px 0;
            padding: 5px;
            background: #f9f9f9;
        }
        .add-subcategory {
            margin: 5px 0;
            padding: 5px;
            color: #666;
            cursor: pointer;
        }
        .subcategory-form {
            display: none;
            margin: 5px 0;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>製品分類一覧</h1>

    <div class="operation-buttons">
        <button onclick="showAddForm()">新規分類追加</button>
        <button onclick="updateOrder()">表示順序を更新</button>
    </div>

    <table>
        <thead>
            <tr>
                <th style="width: 50px;">ID</th>
                <th>分類名</th>
                <th style="width: 100px;">表示順序</th>
                <th style="width: 200px;">操作</th>
            </tr>
        </thead>
        <tbody>
            <% categories.forEach(function(category) { %>
                <tr>
                    <td><%= category.id %></td>
                    <td>
                        <span class="category-name"><%= category.name %></span>
                        <input type="text" class="edit-name" 
                               value="<%= category.name %>" style="display: none;">
                        <div class="subcategories" id="subcategories-<%= category.id %>">
                            <!-- 小分類はJavaScriptで動的に表示 -->
                        </div>
                        <div class="add-subcategory" onclick="showAddSubcategoryForm(<%= category.id %>)">
                            + 小分類を追加
                        </div>
                        <div class="subcategory-form" id="subcategory-form-<%= category.id %>">
                            <input type="text" placeholder="小分類名" id="new-subcategory-name-<%= category.id %>">
                            <input type="number" placeholder="表示順序" id="new-subcategory-order-<%= category.id %>" value="0">
                            <button onclick="addSubcategory(<%= category.id %>)">追加</button>
                            <button onclick="hideAddSubcategoryForm(<%= category.id %>)">キャンセル</button>
                        </div>
                    </td>
                    <td>
                        <input type="number" class="order-input" 
                               data-id="<%= category.id %>" 
                               value="<%= category.sort_order %>">
                    </td>
                    <td>
                        <button onclick="editCategory(<%= category.id %>)">編集</button>
                        <button onclick="deleteCategory(<%= category.id %>)">削除</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <!-- 新規追加フォーム（モーダル） -->
    <div id="addModal" style="display: none; position: fixed; top: 50%; left: 50%; 
                             transform: translate(-50%, -50%); background: white; 
                             padding: 20px; border: 1px solid #ddd; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
        <h2>新規分類追加</h2>
        <div>
            <label>分類名：</label>
            <input type="text" id="newCategoryName">
        </div>
        <div style="margin-top: 10px;">
            <label>表示順序：</label>
            <input type="number" id="newCategoryOrder" value="0">
        </div>
        <div style="margin-top: 20px;">
            <button onclick="addCategory()">保存</button>
            <button onclick="hideAddForm()">キャンセル</button>
        </div>
    </div>

    <script>
        // 新規追加フォームの表示/非表示
        function showAddForm() {
            document.getElementById('addModal').style.display = 'block';
        }
        
        function hideAddForm() {
            document.getElementById('addModal').style.display = 'none';
        }

        // 新規分類の追加
        async function addCategory() {
            const name = document.getElementById('newCategoryName').value;
            const order = document.getElementById('newCategoryOrder').value;
            
            if (!name) {
                alert('分類名を入力してください');
                return;
            }

            try {
                const response = await fetch('/admin/product-categories/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, sort_order: order })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('製品分類を追加しました');
                    location.reload();
                } else {
                    alert(result.message || '追加に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('追加に失敗しました');
            }
        }

        // 分類の削除
        async function deleteCategory(id) {
            if (!confirm('この分類を削除してもよろしいですか？')) {
                return;
            }

            try {
                const response = await fetch(`/admin/product-categories/delete/${id}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('製品分類を削除しました');
                    location.reload();
                } else {
                    alert(result.message || '削除に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('削除に失敗しました');
            }
        }

        // 表示順序の更新
        async function updateOrder() {
            const orders = {};
            document.querySelectorAll('.order-input').forEach(input => {
                orders[input.dataset.id] = input.value;
            });

            try {
                const response = await fetch('/admin/product-categories/updateOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orders)
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('表示順序を更新しました');
                    location.reload();
                } else {
                    alert(result.message || '更新に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('更新に失敗しました');
            }
        }

        // 小分類の読み込みと表示
        async function loadSubcategories(categoryId) {
            try {
                const response = await fetch(`/admin/product-categories/${categoryId}/subcategories`);
                const subcategories = await response.json();
                
                const container = document.getElementById(`subcategories-${categoryId}`);
                container.innerHTML = subcategories.map(sub => `
                    <div class="subcategory-item" id="subcategory-${sub.id}">
                        <span class="subcategory-name">${sub.name}</span>
                        <input type="number" class="order-input" value="${sub.sort_order || 0}" 
                               onchange="updateSubcategoryOrder(${sub.id}, this.value)">
                        <button onclick="editSubcategory(${sub.id})">編集</button>
                        <button onclick="deleteSubcategory(${sub.id})">削除</button>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // 小分類追加フォームの表示/非表示
        function showAddSubcategoryForm(categoryId) {
            document.getElementById(`subcategory-form-${categoryId}`).style.display = 'block';
        }

        function hideAddSubcategoryForm(categoryId) {
            document.getElementById(`subcategory-form-${categoryId}`).style.display = 'none';
        }

        // 小分類の追加
        async function addSubcategory(categoryId) {
            const name = document.getElementById(`new-subcategory-name-${categoryId}`).value;
            const order = document.getElementById(`new-subcategory-order-${categoryId}`).value;
            
            if (!name) {
                alert('小分類名を入力してください');
                return;
            }

            try {
                const response = await fetch(`/admin/product-categories/${categoryId}/subcategories/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, sort_order: order })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('小分類を追加しました');
                    loadSubcategories(categoryId);
                    hideAddSubcategoryForm(categoryId);
                } else {
                    alert(result.message || '追加に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('追加に失敗しました');
            }
        }

        // 小分類の削除
        async function deleteSubcategory(id) {
            if (!confirm('この小分類を削除してもよろしいですか？')) {
                return;
            }

            try {
                const response = await fetch(`/admin/product-subcategories/${id}/delete`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('小分類を削除しました');
                    document.getElementById(`subcategory-${id}`).remove();
                } else {
                    alert(result.message || '削除に失敗しました');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('削除に失敗しました');
            }
        }

        // ページ読み込み時に各カテゴリーの小分類を読み込む
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('[id^="subcategories-"]').forEach(el => {
                const categoryId = el.id.split('-')[1];
                loadSubcategories(categoryId);
            });
        });
    </script>
</body>
</html> 