<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= article.title %> - 編集</title>
    <!-- Bootstrap 5.3.0 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Quill.js CDN -->
    <link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            padding: 0;
            margin: 0;
        }
        
        .container-fluid {
            padding: 1.5rem;
        }

        .card {
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background-color: #1696d7;
            border-bottom: none;
            color: white;
        }

        #editor-container {
            height: 400px;
            margin-bottom: 1rem;
        }

        .ql-editor {
            min-height: 350px;
        }

        .thumbnail-preview {
            max-width: 200px;
            margin-top: 1rem;
        }

        .thumbnail-preview img {
            width: 100%;
            height: auto;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h1 class="h3 mb-0"><%= article.title %> - 編集</h1>
            </div>

            <div class="card-body">
                <form id="articleForm" class="needs-validation" novalidate>
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">タイトル <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" name="title" value="<%= article.title %>" required>
                                <div class="invalid-feedback">
                                    タイトルを入力してください。
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">要約</label>
                                <textarea class="form-control" name="summary" rows="3"><%= article.summary || '' %></textarea>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">著者</label>
                                <input type="text" class="form-control" name="author" value="<%= article.author || '' %>">
                            </div>

                            <div class="mb-3">
                                <label class="form-label">内容</label>
                                <div id="editor-container"></div>
                                <input type="hidden" name="content">
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-header bg-light text-dark">
                                    <h5 class="card-title mb-0">公開設定</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">状態</label>
                                        <select class="form-select" name="status">
                                            <option value="1" <%= article.status ? 'selected' : '' %>>公開</option>
                                            <option value="0" <%= !article.status ? 'selected' : '' %>>非公開</option>
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">サムネイル</label>
                                        <input type="file" class="form-control" name="thumbnail" accept="image/*" onchange="previewImage(this)">
                                        <div class="thumbnail-preview">
                                            <% if (article.thumbnail) { %>
                                                <img src="<%= article.thumbnail %>" id="preview">
                                            <% } else { %>
                                                <img id="preview" class="d-none">
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">保存</button>
                                <button type="button" class="btn btn-secondary" onclick="history.back()">戻る</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Quill.js -->
    <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>

    <script>
        // トースト通知を表示する関数
        function showToast(message, isError = false) {
            const toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            
            const toastHtml = `
                <div class="toast align-items-center text-white ${isError ? 'bg-danger' : 'bg-success'}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            toastContainer.innerHTML = toastHtml;
            document.body.appendChild(toastContainer);
            
            const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
            toast.show();
            
            setTimeout(() => {
                document.body.removeChild(toastContainer);
            }, 5000);
        }

        // Quill.jsの初期化
        const quill = new Quill('#editor-container', {
            theme: 'snow',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    ['blockquote', 'code-block'],
                    [{ 'header': 1 }, { 'header': 2 }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    [{ 'script': 'sub'}, { 'script': 'super' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'direction': 'rtl' }],
                    [{ 'size': ['small', false, 'large', 'huge'] }],
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'font': [] }],
                    [{ 'align': [] }],
                    ['clean'],
                    ['link', 'image', 'video']
                ]
            }
        });
        
        // 既存コンテンツを設定
        quill.root.innerHTML = `<%- article.content %>`;

        // 画像アップロード機能の設定
        const toolbar = quill.getModule('toolbar');
        toolbar.addHandler('image', function() {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');
            input.click();
            
            input.onchange = async () => {
                const file = input.files[0];
                if (file) {
                    const formData = new FormData();
                    formData.append('image', file);
                    
                    try {
                        const response = await fetch('/admin/upload-image', {
                            method: 'POST',
                            body: formData
                        });
                        const result = await response.json();
                        if (result.success && result.url) {
                            const range = quill.getSelection();
                            quill.insertEmbed(range.index, 'image', result.url);
                        } else {
                            showToast('画像のアップロードに失敗しました', true);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showToast('画像のアップロードに失敗しました', true);
                    }
                }
            };
        });

        // 画像プレビュー機能
        function previewImage(input) {
            const preview = document.getElementById('preview');
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.classList.remove('d-none');
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        // フォーム送信処理
        document.getElementById('articleForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!this.checkValidity()) {
                e.stopPropagation();
                this.classList.add('was-validated');
                return;
            }
            
            const formData = new FormData(this);
            formData.append('content', quill.root.innerHTML);

            try {
                const response = await fetch('/admin/articles/edit/<%= article.id %>', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('記事を更新しました');
                    setTimeout(() => {
                        window.location.href = '/admin/articles/<%= article.category_id %>/list';
                    }, 1000);
                } else {
                    showToast(result.message || '更新に失敗しました', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('更新に失敗しました', true);
            }
        });
    </script>
</body>
</html> 