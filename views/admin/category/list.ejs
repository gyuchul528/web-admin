<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>カテゴリー一覧</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            padding: 0;
            margin: 0;
        }
        .indent-text {
            margin-left: 20px;
        }
        .order-input {
            width: 60px !important;
            text-align: center;
            padding: 0.25rem 0.5rem;
            display: inline-block;
            height: calc(1.5em + 0.5rem + 2px);
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col">
                <button class="btn btn-primary me-2" onclick="addCategory()">カテゴリー追加</button>
                <button class="btn btn-secondary" onclick="updateOrder()">順序更新</button>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-light">
                            <tr>
                                <th class="text-center" style="width: 40px;"><input type="checkbox" id="selectAll" class="form-check-input"></th>
                                <th style="width: 60px;">番号</th>
                                <th>名称</th>
                                <th>所属モデル</th>
                                <th>表示</th>
                                <th style="width: 80px;">順序</th>
                                <th style="width: 300px;">操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% 
                            // 辅助函数：获取缩进空格
                            function getIndent(level) {
                                return '　'.repeat(level);
                            }

                            // 辅助函数：递归渲染分类
                            function renderCategories(categories, parentId = 0, level = 0) {
                                categories.filter(cat => cat.parent_id == parentId).forEach(function(category) { 
                            %>
                                <tr>
                                    <td class="text-center">
                                        <input type="checkbox" name="ids" value="<%= category.id %>" class="form-check-input">
                                    </td>
                                    <td><%= category.id %></td>
                                    <td>
                                        <%= getIndent(level) %>
                                        <%= level > 0 ? '|--' : '' %>
                                        <%= category.name %>
                                    </td>
                                    <td>
                                        <% 
                                        let modelName;
                                        switch(parseInt(category.model_id)) {
                                            case 1:
                                                modelName = 'ページモデル';
                                                break;
                                            case 2:
                                                modelName = '記事モデル';
                                                break;
                                            case 3:
                                                modelName = '製品モデル';
                                                break;
                                            case 4:
                                                modelName = '写真モデル';
                                                break;
                                            case 5:
                                                modelName = '外部リンク';
                                                break;
                                            default:
                                                modelName = '不明';
                                        }
                                        %>
                                        <%= modelName %>
                                    </td>
                                    <td><%= category.parent_id === 1 ? 'いいえ' : 'はい' %></td>
                                    <td>
                                        <input type="number" 
                                               class="form-control form-control-sm order-input" 
                                               data-id="<%= category.id %>" 
                                               value="<%= category.sort_order || 0 %>"
                                               min="0"
                                               step="1">
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a href="/admin/category/addChild/<%= category.id %>" class="btn btn-outline-primary">サブカテゴリー追加</a>
                                            <a href="/admin/content/<%= category.model_id %>/list?category=<%= category.id %>" class="btn btn-outline-info">一覧</a>
                                            <a href="/admin/category/edit/<%= category.id %>" class="btn btn-outline-secondary">編集</a>
                                            <button type="button" class="btn btn-outline-danger" onclick="deleteCategory('<%= category.id %>')">削除</button>
                                        </div>
                                    </td>
                                </tr>
                            <%
                                    // 递归渲染子分类
                                    renderCategories(categories, category.id, level + 1);
                                });
                            }
                            %>
                            
                            <% renderCategories(categories); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 全選功能
        document.getElementById('selectAll').addEventListener('change', function() {
            var checkboxes = document.getElementsByName('ids');
            for(var checkbox of checkboxes) {
                checkbox.checked = this.checked;
            }
        });

        // 更新排序
        function updateOrder() {
            var orders = {};
            document.querySelectorAll('.order-input').forEach(function(input) {
                orders[input.dataset.id] = input.value;
            });

            fetch('/admin/category/updateOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orders)
            })
            .then(response => response.json())
            .then(data => {
                if(data.success) {
                    alert('順序が更新されました');
                    location.reload();
                } else {
                    alert(data.message || '更新に失敗しました');
                }
            });
        }

        // 修改添加栏目函数
        function addCategory() {
            window.location.href = '/admin/category/add';  // 修改这里的路径
        }

        // 删除栏目
        function deleteCategory(id) {
            if(confirm('このカテゴリーを削除してもよろしいですか？')) {
                fetch(`/admin/category/delete/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if(data.success) {
                        alert(data.message);
                        window.location.reload();
                    } else {
                        alert(data.message || '削除に失敗しました');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('削除に失敗しました');
                });
            }
        }
    </script>
</body>
</html> 